// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(USER)
  status    UserStatus @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relantionship
  trips     Trip[]

  @@map("users")
}

model Vehicle {
  id       String        @id @default(cuid())
  plate    String        @unique
  model    String
  brand    String
  year     Int
  capacity Int
  status   VehicleStatus @default(ACTIVE)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // Relantionship
  trips Trip[]
  expenses Expense[]

  @@map("vehicles")
}

model Driver {
  id      String       @id @default(cuid())
  name    String
  cpf     String       @unique
  cnh     String       @unique
  phone   String
  email   String?
  address String?
  status  DriverStatus @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relantionship
  trips Trip[]
  expenses Expense[]

  @@map("drivers")
}

model Client {
  id      String       @id @default(cuid())
  name    String
  cpf     String?      @unique
  cnpj    String?      @unique
  phone   String
  email   String?
  address String?
  status  ClientStatus @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relantionship
  trips Trip[]

  @@map("clients")
}

model Trip {
  id           String      @id @default(cuid())
  origin       String
  destination  String
  departureDate DateTime
  returnDate   DateTime?
  initialKilometer Int?
  finalKilometer   Int?

  tripValue     Float?
  status       TripStatus  @default(SCHEDULED)
  notes        String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relantionship
  vehicleId String
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  driverId String
  driver   Driver @relation(fields: [driverId], references: [id], onDelete: Cascade)

  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  userId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relantionship
  expenses Expense[]

  @@map("trips")
}

model Expense {
  id        String       @id @default(cuid())
  name      String
  value     Float
  date      DateTime
  type      ExpenseType
  notes     String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // Relantionship
  tripId String
  trip   Trip @relation(fields: [tripId], references: [id], onDelete: Cascade)

  driverId String
  driver   Driver @relation(fields: [driverId], references: [id], onDelete: Cascade)

  vehicleId String
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@map("expenses")
}

enum UserRole {
  ADMIN
  MANAGER
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum VehicleStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
}

enum DriverStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  ON_TRIP
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum TripStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ExpenseType {
  MAINTENANCE
  TOLL
  FUEL
  FOOD
  OTHER
}
